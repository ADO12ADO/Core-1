"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstroportMakerMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var AstroportMakerMessageComposer = /** @class */ (function () {
    function AstroportMakerMessageComposer(sender, contractAddress) {
        var _this = this;
        this.collect = function (_a, funds) {
            var assets = _a.assets;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        collect: {
                            assets: assets
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.updateConfig = function (_a, funds) {
            var factoryContract = _a.factoryContract, governanceContract = _a.governanceContract, governancePercent = _a.governancePercent, maxSpread = _a.maxSpread, stakingContract = _a.stakingContract;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_config: {
                            factory_contract: factoryContract,
                            governance_contract: governanceContract,
                            governance_percent: governancePercent,
                            max_spread: maxSpread,
                            staking_contract: stakingContract
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.updateBridges = function (_a, funds) {
            var add = _a.add, remove = _a.remove;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_bridges: {
                            add: add,
                            remove: remove
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.swapBridgeAssets = function (_a, funds) {
            var assets = _a.assets, depth = _a.depth;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        swap_bridge_assets: {
                            assets: assets,
                            depth: depth
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.distributeAstro = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        distribute_astro: {}
                    })),
                    funds: funds
                })
            };
        };
        this.proposeNewOwner = function (_a, funds) {
            var expiresIn = _a.expiresIn, owner = _a.owner;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        propose_new_owner: {
                            expires_in: expiresIn,
                            owner: owner
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.dropOwnershipProposal = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        drop_ownership_proposal: {}
                    })),
                    funds: funds
                })
            };
        };
        this.claimOwnership = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        claim_ownership: {}
                    })),
                    funds: funds
                })
            };
        };
        this.enableRewards = function (_a, funds) {
            var blocks = _a.blocks;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        enable_rewards: {
                            blocks: blocks
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.collect = this.collect.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
        this.updateBridges = this.updateBridges.bind(this);
        this.swapBridgeAssets = this.swapBridgeAssets.bind(this);
        this.distributeAstro = this.distributeAstro.bind(this);
        this.proposeNewOwner = this.proposeNewOwner.bind(this);
        this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
        this.claimOwnership = this.claimOwnership.bind(this);
        this.enableRewards = this.enableRewards.bind(this);
    }
    return AstroportMakerMessageComposer;
}());
exports.AstroportMakerMessageComposer = AstroportMakerMessageComposer;
