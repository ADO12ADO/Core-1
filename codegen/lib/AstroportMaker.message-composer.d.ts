/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Uint64, Decimal, AssetInfo, UpdateAddr, AssetWithLimit } from "./AstroportMaker.types";
export interface AstroportMakerMessage {
    contractAddress: string;
    sender: string;
    collect: ({ assets }: {
        assets: AssetWithLimit[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ factoryContract, governanceContract, governancePercent, maxSpread, stakingContract }: {
        factoryContract?: string;
        governanceContract?: UpdateAddr;
        governancePercent?: Uint64;
        maxSpread?: Decimal;
        stakingContract?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateBridges: ({ add, remove }: {
        add?: AssetInfo[][][];
        remove?: AssetInfo[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    swapBridgeAssets: ({ assets, depth }: {
        assets: AssetInfo[];
        depth: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeAstro: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    dropOwnershipProposal: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    enableRewards: ({ blocks }: {
        blocks: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class AstroportMakerMessageComposer implements AstroportMakerMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    collect: ({ assets }: {
        assets: AssetWithLimit[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ factoryContract, governanceContract, governancePercent, maxSpread, stakingContract }: {
        factoryContract?: string | undefined;
        governanceContract?: UpdateAddr | undefined;
        governancePercent?: string | undefined;
        maxSpread?: string | undefined;
        stakingContract?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateBridges: ({ add, remove }: {
        add?: AssetInfo[][][] | undefined;
        remove?: AssetInfo[] | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    swapBridgeAssets: ({ assets, depth }: {
        assets: AssetInfo[];
        depth: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    distributeAstro: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    dropOwnershipProposal: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    enableRewards: ({ blocks }: {
        blocks: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
