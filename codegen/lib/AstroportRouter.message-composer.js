"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstroportRouterMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var AstroportRouterMessageComposer = /** @class */ (function () {
    function AstroportRouterMessageComposer(sender, contractAddress) {
        var _this = this;
        this.receive = function (_a, funds) {
            var amount = _a.amount, msg = _a.msg, sender = _a.sender;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        receive: {
                            amount: amount,
                            msg: msg,
                            sender: sender
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.executeSwapOperations = function (_a, funds) {
            var maxSpread = _a.maxSpread, minimumReceive = _a.minimumReceive, operations = _a.operations, to = _a.to;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        execute_swap_operations: {
                            max_spread: maxSpread,
                            minimum_receive: minimumReceive,
                            operations: operations,
                            to: to
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.executeSwapOperation = function (_a, funds) {
            var maxSpread = _a.maxSpread, operation = _a.operation, single = _a.single, to = _a.to;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        execute_swap_operation: {
                            max_spread: maxSpread,
                            operation: operation,
                            single: single,
                            to: to
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.assertMinimumReceive = function (_a, funds) {
            var assetInfo = _a.assetInfo, minimumReceive = _a.minimumReceive, prevBalance = _a.prevBalance, receiver = _a.receiver;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        assert_minimum_receive: {
                            asset_info: assetInfo,
                            minimum_receive: minimumReceive,
                            prev_balance: prevBalance,
                            receiver: receiver
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.receive = this.receive.bind(this);
        this.executeSwapOperations = this.executeSwapOperations.bind(this);
        this.executeSwapOperation = this.executeSwapOperation.bind(this);
        this.assertMinimumReceive = this.assertMinimumReceive.bind(this);
    }
    return AstroportRouterMessageComposer;
}());
exports.AstroportRouterMessageComposer = AstroportRouterMessageComposer;
