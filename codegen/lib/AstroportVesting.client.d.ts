/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Binary, OrderBy, ConfigResponse, Uint64, VestingAccountResponse, VestingAccountsResponse } from "./AstroportVesting.types";
export interface AstroportVestingReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    vestingAccount: ({ address }: {
        address: string;
    }) => Promise<VestingAccountResponse>;
    vestingAccounts: ({ limit, orderBy, startAfter }: {
        limit?: number;
        orderBy?: OrderBy;
        startAfter?: string;
    }) => Promise<VestingAccountsResponse>;
    availableAmount: ({ address }: {
        address: string;
    }) => Promise<Uint128>;
    timestamp: () => Promise<Uint64>;
}
export declare class AstroportVestingQueryClient implements AstroportVestingReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    vestingAccount: ({ address }: {
        address: string;
    }) => Promise<VestingAccountResponse>;
    vestingAccounts: ({ limit, orderBy, startAfter }: {
        limit?: number | undefined;
        orderBy?: OrderBy | undefined;
        startAfter?: string | undefined;
    }) => Promise<VestingAccountsResponse>;
    availableAmount: ({ address }: {
        address: string;
    }) => Promise<Uint128>;
    timestamp: () => Promise<Uint64>;
}
export interface AstroportVestingInterface extends AstroportVestingReadOnlyInterface {
    contractAddress: string;
    sender: string;
    claim: ({ amount, recipient }: {
        amount?: Uint128;
        recipient?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AstroportVestingClient extends AstroportVestingQueryClient implements AstroportVestingInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    claim: ({ amount, recipient }: {
        amount?: string | undefined;
        recipient?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
