"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstroportGeneratorMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var AstroportGeneratorMessageComposer = /** @class */ (function () {
    function AstroportGeneratorMessageComposer(sender, contractAddress) {
        var _this = this;
        this.updateConfig = function (_a, funds) {
            var checkpointGeneratorLimit = _a.checkpointGeneratorLimit, generatorController = _a.generatorController, guardian = _a.guardian, vestingContract = _a.vestingContract, votingEscrow = _a.votingEscrow, votingEscrowDelegation = _a.votingEscrowDelegation;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_config: {
                            checkpoint_generator_limit: checkpointGeneratorLimit,
                            generator_controller: generatorController,
                            guardian: guardian,
                            vesting_contract: vestingContract,
                            voting_escrow: votingEscrow,
                            voting_escrow_delegation: votingEscrowDelegation
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.setupPools = function (_a, funds) {
            var pools = _a.pools;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        setup_pools: {
                            pools: pools
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.updatePool = function (_a, funds) {
            var hasAssetRewards = _a.hasAssetRewards, lpToken = _a.lpToken;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_pool: {
                            has_asset_rewards: hasAssetRewards,
                            lp_token: lpToken
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.claimRewards = function (_a, funds) {
            var lpTokens = _a.lpTokens;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        claim_rewards: {
                            lp_tokens: lpTokens
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.withdraw = function (_a, funds) {
            var amount = _a.amount, lpToken = _a.lpToken;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        withdraw: {
                            amount: amount,
                            lp_token: lpToken
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.emergencyWithdraw = function (_a, funds) {
            var lpToken = _a.lpToken;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        emergency_withdraw: {
                            lp_token: lpToken
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.sendOrphanProxyReward = function (_a, funds) {
            var lpToken = _a.lpToken, recipient = _a.recipient;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        send_orphan_proxy_reward: {
                            lp_token: lpToken,
                            recipient: recipient
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.receive = function (_a, funds) {
            var amount = _a.amount, msg = _a.msg, sender = _a.sender;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        receive: {
                            amount: amount,
                            msg: msg,
                            sender: sender
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.setTokensPerBlock = function (_a, funds) {
            var amount = _a.amount;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        set_tokens_per_block: {
                            amount: amount
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.proposeNewOwner = function (_a, funds) {
            var expiresIn = _a.expiresIn, owner = _a.owner;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        propose_new_owner: {
                            expires_in: expiresIn,
                            owner: owner
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.dropOwnershipProposal = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        drop_ownership_proposal: {}
                    })),
                    funds: funds
                })
            };
        };
        this.claimOwnership = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        claim_ownership: {}
                    })),
                    funds: funds
                })
            };
        };
        this.moveToProxy = function (_a, funds) {
            var lpToken = _a.lpToken, proxy = _a.proxy;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        move_to_proxy: {
                            lp_token: lpToken,
                            proxy: proxy
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.migrateProxy = function (_a, funds) {
            var lpToken = _a.lpToken, newProxy = _a.newProxy;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        migrate_proxy: {
                            lp_token: lpToken,
                            new_proxy: newProxy
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.updateBlockedTokenslist = function (_a, funds) {
            var add = _a.add, remove = _a.remove;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_blocked_tokenslist: {
                            add: add,
                            remove: remove
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.deactivatePool = function (_a, funds) {
            var lpToken = _a.lpToken;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        deactivate_pool: {
                            lp_token: lpToken
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.deactivatePools = function (_a, funds) {
            var pairTypes = _a.pairTypes;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        deactivate_pools: {
                            pair_types: pairTypes
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.checkpointUserBoost = function (_a, funds) {
            var generators = _a.generators, user = _a.user;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        checkpoint_user_boost: {
                            generators: generators,
                            user: user
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.callback = function (_a, funds) {
            var action = _a.action;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        callback: {
                            action: action
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.setupPools = this.setupPools.bind(this);
        this.updatePool = this.updatePool.bind(this);
        this.claimRewards = this.claimRewards.bind(this);
        this.withdraw = this.withdraw.bind(this);
        this.emergencyWithdraw = this.emergencyWithdraw.bind(this);
        this.sendOrphanProxyReward = this.sendOrphanProxyReward.bind(this);
        this.receive = this.receive.bind(this);
        this.setTokensPerBlock = this.setTokensPerBlock.bind(this);
        this.proposeNewOwner = this.proposeNewOwner.bind(this);
        this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
        this.claimOwnership = this.claimOwnership.bind(this);
        this.moveToProxy = this.moveToProxy.bind(this);
        this.migrateProxy = this.migrateProxy.bind(this);
        this.updateBlockedTokenslist = this.updateBlockedTokenslist.bind(this);
        this.deactivatePool = this.deactivatePool.bind(this);
        this.deactivatePools = this.deactivatePools.bind(this);
        this.checkpointUserBoost = this.checkpointUserBoost.bind(this);
        this.callback = this.callback.bind(this);
    }
    return AstroportGeneratorMessageComposer;
}());
exports.AstroportGeneratorMessageComposer = AstroportGeneratorMessageComposer;
