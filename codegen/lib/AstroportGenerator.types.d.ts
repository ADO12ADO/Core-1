/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export declare type Uint64 = string;
export declare type Uint128 = string;
export interface InstantiateMsg {
    astro_token: string;
    factory: string;
    generator_controller?: string | null;
    guardian?: string | null;
    owner: string;
    start_block: Uint64;
    tokens_per_block: Uint128;
    vesting_contract: string;
    voting_escrow?: string | null;
    voting_escrow_delegation?: string | null;
    whitelist_code_id: number;
}
export declare type ExecuteMsg = {
    update_config: {
        checkpoint_generator_limit?: number | null;
        generator_controller?: string | null;
        guardian?: string | null;
        vesting_contract?: string | null;
        voting_escrow?: string | null;
        voting_escrow_delegation?: string | null;
    };
} | {
    setup_pools: {
        pools: [string, Uint128][];
    };
} | {
    update_pool: {
        has_asset_rewards: boolean;
        lp_token: string;
    };
} | {
    claim_rewards: {
        lp_tokens: string[];
    };
} | {
    withdraw: {
        amount: Uint128;
        lp_token: string;
    };
} | {
    emergency_withdraw: {
        lp_token: string;
    };
} | {
    send_orphan_proxy_reward: {
        lp_token: string;
        recipient: string;
    };
} | {
    receive: Cw20ReceiveMsg;
} | {
    set_tokens_per_block: {
        amount: Uint128;
    };
} | {
    propose_new_owner: {
        expires_in: number;
        owner: string;
    };
} | {
    drop_ownership_proposal: {};
} | {
    claim_ownership: {};
} | {
    move_to_proxy: {
        lp_token: string;
        proxy: string;
    };
} | {
    migrate_proxy: {
        lp_token: string;
        new_proxy: string;
    };
} | {
    update_blocked_tokenslist: {
        add?: AssetInfo[] | null;
        remove?: AssetInfo[] | null;
    };
} | {
    deactivate_pool: {
        lp_token: string;
    };
} | {
    deactivate_pools: {
        pair_types: PairType[];
    };
} | {
    checkpoint_user_boost: {
        generators: string[];
        user?: string | null;
    };
} | {
    callback: {
        action: ExecuteOnReply;
    };
};
export declare type Binary = string;
export declare type AssetInfo = {
    token: {
        contract_addr: Addr;
    };
} | {
    native_token: {
        denom: string;
    };
};
export declare type Addr = string;
export declare type PairType = {
    xyk: {};
} | {
    stable: {};
} | {
    custom: string;
};
export declare type ExecuteOnReply = {
    claim_rewards: {
        account: Addr;
        lp_tokens: Addr[];
    };
} | {
    deposit: {
        account: Addr;
        amount: Uint128;
        lp_token: Addr;
    };
} | {
    withdraw: {
        account: Addr;
        amount: Uint128;
        lp_token: Addr;
    };
} | {
    set_tokens_per_block: {
        amount: Uint128;
    };
} | {
    migrate_proxy: {
        lp_addr: Addr;
        new_proxy_addr: Addr;
    };
} | {
    migrate_proxy_deposit_l_p: {
        amount: Uint128;
        lp_addr: Addr;
        prev_proxy_addr: Addr;
    };
};
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export declare type QueryMsg = {
    active_pool_length: {};
} | {
    pool_length: {};
} | {
    deposit: {
        lp_token: string;
        user: string;
    };
} | {
    user_virtual_amount: {
        lp_token: string;
        user: string;
    };
} | {
    total_virtual_supply: {
        generator: string;
    };
} | {
    pending_token: {
        lp_token: string;
        user: string;
    };
} | {
    config: {};
} | {
    reward_info: {
        lp_token: string;
    };
} | {
    orphan_proxy_rewards: {
        lp_token: string;
    };
} | {
    pool_info: {
        lp_token: string;
    };
} | {
    simulate_future_reward: {
        future_block: number;
        lp_token: string;
    };
} | {
    pool_stakers: {
        limit?: number | null;
        lp_token: string;
        start_after?: string | null;
    };
} | {
    blocked_tokens_list: {};
} | {
    reward_proxies_list: {};
};
export interface MigrateMsg {
    blocked_list_tokens?: AssetInfo[] | null;
    factory?: string | null;
    generator_controller?: string | null;
    generator_limit?: number | null;
    guardian?: string | null;
    voting_escrow?: string | null;
    voting_escrow_delegation?: string | null;
    whitelist_code_id?: number | null;
}
export declare type Uint = number;
export declare type ArrayOfAssetInfo = AssetInfo[];
export interface Config {
    active_pools: [Addr, Uint128][];
    astro_token: Addr;
    blocked_tokens_list: AssetInfo[];
    checkpoint_generator_limit?: number | null;
    factory: Addr;
    generator_controller?: Addr | null;
    guardian?: Addr | null;
    owner: Addr;
    start_block: Uint64;
    tokens_per_block: Uint128;
    total_alloc_point: Uint128;
    vesting_contract: Addr;
    voting_escrow?: Addr | null;
    voting_escrow_delegation?: Addr | null;
}
export declare type ArrayOfTupleOfAssetInfoAndUint128 = [AssetInfo, Uint128][];
export interface PendingTokenResponse {
    pending: Uint128;
    pending_on_proxy?: Asset[] | null;
}
export interface Asset {
    amount: Uint128;
    info: AssetInfo;
}
export declare type Decimal = string;
export interface PoolInfoResponse {
    accumulated_proxy_rewards_per_share: [Addr, Decimal][];
    alloc_point: Uint128;
    astro_tokens_per_block: Uint128;
    current_block: number;
    global_reward_index: Decimal;
    last_reward_block: number;
    lp_supply: Uint128;
    orphan_proxy_rewards: [Addr, Uint128][];
    pending_astro_rewards: Uint128;
    pending_proxy_rewards?: Uint128 | null;
    proxy_reward_balance_before_update: Uint128;
    reward_proxy?: Addr | null;
}
export declare type ArrayOfStakerResponse = StakerResponse[];
export interface StakerResponse {
    account: string;
    amount: Uint128;
}
export interface RewardInfoResponse {
    base_reward_token: Addr;
    proxy_reward_token?: Addr | null;
}
export declare type ArrayOfAddr = Addr[];
