/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, Binary, Uint128, Decimal, Asset, ConfigResponse, CumulativePricesResponse, PairInfo, PoolResponse, ReverseSimulationResponse, ArrayOfAsset, SimulationResponse } from "./AstroportPair.types";
export interface AstroportPairReadOnlyInterface {
    contractAddress: string;
    pair: () => Promise<PairInfo>;
    pool: () => Promise<PoolResponse>;
    config: () => Promise<ConfigResponse>;
    share: ({ amount }: {
        amount: Uint128;
    }) => Promise<ArrayOfAsset>;
    simulation: ({ askAssetInfo, offerAsset }: {
        askAssetInfo?: AssetInfo;
        offerAsset: Asset;
    }) => Promise<SimulationResponse>;
    reverseSimulation: ({ askAsset, offerAssetInfo }: {
        askAsset: Asset;
        offerAssetInfo?: AssetInfo;
    }) => Promise<ReverseSimulationResponse>;
    cumulativePrices: () => Promise<CumulativePricesResponse>;
    queryComputeD: () => Promise<Uint128>;
}
export declare class AstroportPairQueryClient implements AstroportPairReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    pair: () => Promise<PairInfo>;
    pool: () => Promise<PoolResponse>;
    config: () => Promise<ConfigResponse>;
    share: ({ amount }: {
        amount: Uint128;
    }) => Promise<ArrayOfAsset>;
    simulation: ({ askAssetInfo, offerAsset }: {
        askAssetInfo?: AssetInfo | undefined;
        offerAsset: Asset;
    }) => Promise<SimulationResponse>;
    reverseSimulation: ({ askAsset, offerAssetInfo }: {
        askAsset: Asset;
        offerAssetInfo?: AssetInfo | undefined;
    }) => Promise<ReverseSimulationResponse>;
    cumulativePrices: () => Promise<CumulativePricesResponse>;
    queryComputeD: () => Promise<Uint128>;
}
export interface AstroportPairInterface extends AstroportPairReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    provideLiquidity: ({ assets, autoStake, receiver, slippageTolerance }: {
        assets: Asset[];
        autoStake?: boolean;
        receiver?: string;
        slippageTolerance?: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swap: ({ askAssetInfo, beliefPrice, maxSpread, offerAsset, to }: {
        askAssetInfo?: AssetInfo;
        beliefPrice?: Decimal;
        maxSpread?: Decimal;
        offerAsset: Asset;
        to?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ params }: {
        params: Binary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AstroportPairClient extends AstroportPairQueryClient implements AstroportPairInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    provideLiquidity: ({ assets, autoStake, receiver, slippageTolerance }: {
        assets: Asset[];
        autoStake?: boolean | undefined;
        receiver?: string | undefined;
        slippageTolerance?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swap: ({ askAssetInfo, beliefPrice, maxSpread, offerAsset, to }: {
        askAssetInfo?: AssetInfo | undefined;
        beliefPrice?: string | undefined;
        maxSpread?: string | undefined;
        offerAsset: Asset;
        to?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ params }: {
        params: Binary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
