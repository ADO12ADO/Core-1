"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstroportFactoryMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var AstroportFactoryMessageComposer = /** @class */ (function () {
    function AstroportFactoryMessageComposer(sender, contractAddress) {
        var _this = this;
        this.updateConfig = function (_a, funds) {
            var feeAddress = _a.feeAddress, generatorAddress = _a.generatorAddress, tokenCodeId = _a.tokenCodeId, whitelistCodeId = _a.whitelistCodeId;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_config: {
                            fee_address: feeAddress,
                            generator_address: generatorAddress,
                            token_code_id: tokenCodeId,
                            whitelist_code_id: whitelistCodeId
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.updatePairConfig = function (_a, funds) {
            var config = _a.config;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_pair_config: {
                            config: config
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.createPair = function (_a, funds) {
            var assetInfos = _a.assetInfos, initParams = _a.initParams, pairType = _a.pairType;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        create_pair: {
                            asset_infos: assetInfos,
                            init_params: initParams,
                            pair_type: pairType
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.deregister = function (_a, funds) {
            var assetInfos = _a.assetInfos;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        deregister: {
                            asset_infos: assetInfos
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.proposeNewOwner = function (_a, funds) {
            var expiresIn = _a.expiresIn, owner = _a.owner;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        propose_new_owner: {
                            expires_in: expiresIn,
                            owner: owner
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.dropOwnershipProposal = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        drop_ownership_proposal: {}
                    })),
                    funds: funds
                })
            };
        };
        this.claimOwnership = function (funds) {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        claim_ownership: {}
                    })),
                    funds: funds
                })
            };
        };
        this.markAsMigrated = function (_a, funds) {
            var pairs = _a.pairs;
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        mark_as_migrated: {
                            pairs: pairs
                        }
                    })),
                    funds: funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.updateConfig = this.updateConfig.bind(this);
        this.updatePairConfig = this.updatePairConfig.bind(this);
        this.createPair = this.createPair.bind(this);
        this.deregister = this.deregister.bind(this);
        this.proposeNewOwner = this.proposeNewOwner.bind(this);
        this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
        this.claimOwnership = this.claimOwnership.bind(this);
        this.markAsMigrated = this.markAsMigrated.bind(this);
    }
    return AstroportFactoryMessageComposer;
}());
exports.AstroportFactoryMessageComposer = AstroportFactoryMessageComposer;
