/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint64, Decimal, AssetInfo, UpdateAddr, AssetWithLimit, BalancesResponse, ArrayOfTupleOfStringAndString, ConfigResponse } from "./AstroportMaker.types";
export interface AstroportMakerReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    balances: ({ assets }: {
        assets: AssetInfo[];
    }) => Promise<BalancesResponse>;
    bridges: () => Promise<ArrayOfTupleOfStringAndString>;
}
export declare class AstroportMakerQueryClient implements AstroportMakerReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    balances: ({ assets }: {
        assets: AssetInfo[];
    }) => Promise<BalancesResponse>;
    bridges: () => Promise<ArrayOfTupleOfStringAndString>;
}
export interface AstroportMakerInterface extends AstroportMakerReadOnlyInterface {
    contractAddress: string;
    sender: string;
    collect: ({ assets }: {
        assets: AssetWithLimit[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ factoryContract, governanceContract, governancePercent, maxSpread, stakingContract }: {
        factoryContract?: string;
        governanceContract?: UpdateAddr;
        governancePercent?: Uint64;
        maxSpread?: Decimal;
        stakingContract?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateBridges: ({ add, remove }: {
        add?: AssetInfo[][][];
        remove?: AssetInfo[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapBridgeAssets: ({ assets, depth }: {
        assets: AssetInfo[];
        depth: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    distributeAstro: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    enableRewards: ({ blocks }: {
        blocks: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AstroportMakerClient extends AstroportMakerQueryClient implements AstroportMakerInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    collect: ({ assets }: {
        assets: AssetWithLimit[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ factoryContract, governanceContract, governancePercent, maxSpread, stakingContract }: {
        factoryContract?: string | undefined;
        governanceContract?: UpdateAddr | undefined;
        governancePercent?: string | undefined;
        maxSpread?: string | undefined;
        stakingContract?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateBridges: ({ add, remove }: {
        add?: AssetInfo[][][] | undefined;
        remove?: AssetInfo[] | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapBridgeAssets: ({ assets, depth }: {
        assets: AssetInfo[];
        depth: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    distributeAstro: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    enableRewards: ({ blocks }: {
        blocks: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
