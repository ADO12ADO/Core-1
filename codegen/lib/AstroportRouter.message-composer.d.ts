/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Uint128, Binary, Decimal, SwapOperation, AssetInfo } from "./AstroportRouter.types";
export interface AstroportRouterMessage {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeSwapOperations: ({ maxSpread, minimumReceive, operations, to }: {
        maxSpread?: Decimal;
        minimumReceive?: Uint128;
        operations: SwapOperation[];
        to?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeSwapOperation: ({ maxSpread, operation, single, to }: {
        maxSpread?: Decimal;
        operation: SwapOperation;
        single: boolean;
        to?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    assertMinimumReceive: ({ assetInfo, minimumReceive, prevBalance, receiver }: {
        assetInfo: AssetInfo;
        minimumReceive: Uint128;
        prevBalance: Uint128;
        receiver: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class AstroportRouterMessageComposer implements AstroportRouterMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeSwapOperations: ({ maxSpread, minimumReceive, operations, to }: {
        maxSpread?: string | undefined;
        minimumReceive?: string | undefined;
        operations: SwapOperation[];
        to?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeSwapOperation: ({ maxSpread, operation, single, to }: {
        maxSpread?: string | undefined;
        operation: SwapOperation;
        single: boolean;
        to?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    assertMinimumReceive: ({ assetInfo, minimumReceive, prevBalance, receiver }: {
        assetInfo: AssetInfo;
        minimumReceive: Uint128;
        prevBalance: Uint128;
        receiver: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
