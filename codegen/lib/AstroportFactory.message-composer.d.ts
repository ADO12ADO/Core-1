/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { PairType, PairConfig, AssetInfo, Binary } from "./AstroportFactory.types";
export interface AstroportFactoryMessage {
    contractAddress: string;
    sender: string;
    updateConfig: ({ feeAddress, generatorAddress, tokenCodeId, whitelistCodeId }: {
        feeAddress?: string;
        generatorAddress?: string;
        tokenCodeId?: number;
        whitelistCodeId?: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePairConfig: ({ config }: {
        config: PairConfig;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createPair: ({ assetInfos, initParams, pairType }: {
        assetInfos: AssetInfo[];
        initParams?: Binary;
        pairType: PairType;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    deregister: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    dropOwnershipProposal: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    markAsMigrated: ({ pairs }: {
        pairs: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class AstroportFactoryMessageComposer implements AstroportFactoryMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    updateConfig: ({ feeAddress, generatorAddress, tokenCodeId, whitelistCodeId }: {
        feeAddress?: string | undefined;
        generatorAddress?: string | undefined;
        tokenCodeId?: number | undefined;
        whitelistCodeId?: number | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updatePairConfig: ({ config }: {
        config: PairConfig;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createPair: ({ assetInfos, initParams, pairType }: {
        assetInfos: AssetInfo[];
        initParams?: string | undefined;
        pairType: PairType;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    deregister: ({ assetInfos }: {
        assetInfos: AssetInfo[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    proposeNewOwner: ({ expiresIn, owner }: {
        expiresIn: number;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    dropOwnershipProposal: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    markAsMigrated: ({ pairs }: {
        pairs: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
